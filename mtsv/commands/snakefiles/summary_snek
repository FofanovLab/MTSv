import os
import numpy as np
import json
from mtsv.utils import (
    bin_path, script_path,
    track_file_params,
    get_database_params)
from mtsv.parsing import parse_query_id, format_cml_params, file_type
shell.prefix("set -euo pipefail;")

BIN = bin_path('mtsv-signature')
SCRIPT = script_path('MTSv_summary.py')
REPORT = "summary_report.html"

if "database_config" not in config:
    config['database_config'] = json.loads(open(os.path.join(
        os.path.dirname(config['merge_file']),
        ".params"),
        'r').read())['merge_file'][config['merge_file']]['database_config']
    
config['taxdump_path'] = file_type(get_database_params(
    config['database_config'], 'taxdump-path'))
config['tree_index'] = file_type(get_database_params(
    config['database_config'], 'tree-index'))

CML_PARAMS = format_cml_params(
    'SUMMARY',
    config,
    ['taxdump_path', 'tax_level',
    'merge_file', 'signature_file',
    'summary_file', 'tree_index'],
    ["--{}".format(config['tax_level'])] if
        config['tax_level'] != 'species' else [])

MEM = 20

rule summary_all:
    input:
        REPORT

rule summary_report:
    input:
        sig=config['signature_file'],
        summary=config['summary_file']
    output:
        REPORT
    resources:
        mem_mb=lambda wildcards, attempt, input: attempt * 500
    run:
        from snakemake.utils import report
        sig = np.genfromtxt(
            input['sig'], delimiter=":", dtype=str, usecols=0)
        n_sig_unique = len(sig)
        n_total_sig = "\t".join(np.array(np.sum(
            np.array(
                [parse_query_id(s) for s in sig],
                dtype=int), axis=0), dtype=str))
        track_file_params(
            'summary_file', config['summary_file'], config)
        report(
            """ 
            Summary Report
            ============================
            **Signature hits are reported in:**\n
            {input.sig}\n
            **Summary table:** \n
            {input.summary}\n
            Summary_\n
            There were **{n_sig_unique}** unique signature hits.\n
            Total number of reads assocated with signature hits:\n
            **{n_total_sig}**
            
            
            """, output[0], Summary=input['summary'])

rule signature:
    """Find signature hits"""
    output:
        config['signature_file']
    input:
        infile = config['merge_file'],
        index = config['tree_index']
    params:
        call = BIN,
        args = CML_PARAMS
    resources:
        mem_mb=lambda wildcards, attempt, input: attempt * 500
    log:
        config['log_file']
    threads: 1 # max at 1 until threading issue is figured out
    message: """Finding signature reads from {input}. Writing to {output}"""
    shell:
        """{params.call} --index {input.index} --input {input.infile} --output {output} {params.args} >> {log} 2>&1"""

rule summary:
    """Summarize number of total and signature hits for each taxa"""
    output: config['summary_file']
    input: 
        sig=config['signature_file'],
        clp=config['merge_file']
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 500
    params:
        taxdump=config['taxdump_path']
    threads:
        config['threads']
    log:
        config['log_file']
    message:
        """Running summary on {input.sig} and {input.clp}.
        Writing to {output}"""
    script: SCRIPT
