from mtsv.utils import script_path

include: "binning_snek"
include: "summary_snek"

shell.prefix("set -euo pipefail;")

SCRIPTS = {
    'random_kmers': script_path("MTSv_random_kmers.py"),
    'analyze': script_path("MTSv_analyze.py")
}


EXP_DB_PARAMS = {
    'db_path': config['database_config'],
    'kmer': config['kmer'],
    'edits': config['edits'],
    'seed_size': config['seed-size'],
    'seed_gap': config['seed-gap'],
    'min_seeds': config['min-seeds']}

rule analyze_all:
    input: config['analysis_file']


MEM = config['kmer'] * config['n_kmers'] * config['threads'] * 200

rule random_kmers:
    input: config['candidate_taxa_req']
    output:
        fasta=config['fasta']
    message:
        """Generating random kmers from candidate taxa.
        Writing to {output}. Using {resources.mem_mb} Mb of memory and {threads} threads"""
    resources:
        mem_mb=lambda wildcards, attempt: attempt * (MEM//1000000)
    params:
        kmer_size=config['kmer'],
        n_kmers=config['n_kmers'],
        fasta_path=config['fasta_db'],
        pickle_path=config['serial_path']
    threads:
        config['threads']
    log:
        config['log_file']
    script: SCRIPTS['random_kmers']


rule analyze:
    input: config['summary_file']
    output: config['analysis_file']
    message: """Analyzing statistics. Writing to {output}."""
    params:
        obs_summary=config['summary_file_in'],
        taxa=config['candidate_taxa'],
        req_taxa=config['candidate_taxa_req'],
        exp_db_params=EXP_DB_PARAMS
    log: config['log_file']
    script: SCRIPTS['analyze']    

    
